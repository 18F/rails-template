version: 2.1

orbs:
  ruby: circleci/ruby@1.3.0
  node: circleci/node@5.0.0
  browser-tools: circleci/browser-tools@1.2.3

commands:
  setup-project:
    steps:
      - checkout
      - ruby/install-deps
      - node/install:
          install-yarn: true
      - node/install-packages:
          cache-only-lockfile: false
          pkg-manager: yarn
  cg-deploy:
    description: "Login to cloud foundry space with service account credentials
      and push application using deployment configuration file."
    parameters:
      cloudgov_username:
        description: "Username of SpaceDeployer account for cloudgov space"
        type: string
      cloudgov_password:
        description: "Name of CircleCi project environment variable that
          holds deployer password for cloudgov space"
        type: env_var_name
      cloudgov_org:
        description: "cloud.gov organization name"
        type: string
      cloudgov_space:
        description: "cloud.gov space name"
        type: string
      deploy_config_file:
        description: "Path to deployment configuration file"
        type: string
      rails_master_key:
        description: "Name of CircleCI project environment variable holding the RAILS_MASTER_KEY"
        type: env_var_name
    steps:
      - run:
          name: Login with service account
          command: |
            cf login -a api.fr.cloud.gov \
              -u << parameters.cloudgov_username >> \
              -p ${<< parameters.cloudgov_password >>} \
              -o << parameters.cloudgov_org >> \
              -s << parameters.cloudgov_space >>
      - run:
          name: Push application with deployment vars
          command: |
            cf push --strategy rolling \
              --vars-file << parameters.deploy_config_file >> \
              --var rails_master_key=${<< parameters.rails_master_key >>}

jobs:
  build:
    docker:
      - image: cimg/ruby:<%= @ruby_version %>
    steps:
      - setup-project

  test:
    parallelism: 3
    docker:
      - image: cimg/ruby:<%= @ruby_version %>
      - image: cimg/postgres:12.9
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: <%= app_name %>_test
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - setup-project
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - ruby/rspec-test

  static_security_scans:
    docker:
      - image: cimg/ruby:<%= @ruby_version %>
    steps:
      - setup-project
      - run:
          name: Run Brakeman scan
          command: bundle exec brakeman
      - run:
          name: Bundle audit
          command: bundle exec rake bundler:audit
      - run:
          name: Yarn audit
          command: bundle exec rake yarn:audit

  owasp_scan:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout

      # attempt to restore cache from build step to speed up local server startup time
      # This will need to be updated if the cache key for the `install-(deps|packages)` steps changes
      - restore_cache:
          keys:
            - gems-v1-{{ checksum "Gemfile.lock"  }}-{{ .Branch }}
      - restore_cache:
          keys:
            - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Start up local server
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Run OWASP Zap
          command: |
            docker run -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro -v $(pwd)/reports:/zap/wrk:rw --rm \
              --user zap:$(id -g) --network="project_ci_network" -t owasp/zap2docker-weekly \
              zap-baseline.py -t http://web:3000 -c zap.conf -I -i -r owasp_report.html
      - store_artifacts:
          path: reports/owasp_report.html

  owasp_full_scan:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout

      # attempt to restore cache from build step to speed up local server startup time
      # This will need to be updated if the cache key for the `install-(deps|packages)` steps changes
      - restore_cache:
          keys:
            - gems-v1-{{ checksum "Gemfile.lock"  }}-{{ .Branch }}
      - restore_cache:
          keys:
            - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Start up local server
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Run OWASP Zap
          command: |
            docker run -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro -v $(pwd)/reports:/zap/wrk:rw --rm \
              --user zap:$(id -g) --network="project_ci_network" -t owasp/zap2docker-weekly \
              zap-full-scan.py -t http://web:3000 -c zap.conf -I -i -r owasp_report.html
      - store_artifacts:
          path: reports/owasp_report.html

  a11y_scan:
    docker:
      - image: cimg/ruby:<%= @ruby_version %>
      - image: cimg/postgres:12.9
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: <%= app_name %>_development
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: ci
    steps:
      - setup-project
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - run:
          name: Start server
          command: ./bin/rails server -p 3000
          background: true

      - run:
          name: Wait for server
          command: dockerize -wait http://localhost:3000 -timeout 1m

      - run:
          name: Run pa11y-ci
          command: yarn run pa11y-ci

  deploy:
    docker:
      - image: cimg/ruby:<%= @ruby_version %>
    steps:
      - setup-project
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, "main"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - run:
                name: Vendor gems
                command: bundle cache --all
            - run:
                name: Install Cloud Foundry CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
      - when:
          condition:
            and:
              - equal:
                  [
                    << pipeline.project.git_url >>,
                    "TKTK insert repo URL",
                  ]
              - equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - cg-deploy:
                cloudgov_username: TKTK_staging_username
                cloudgov_password: CF_STAGE_PASSWORD
                cloudgov_org: TKTK-cloud.gov-org-name
                cloudgov_space: staging
                deploy_config_file: config/deployment/staging.yml
                rails_master_key: RAILS_MASTER_KEY
      - when:
          condition:
            and:
              - equal:
                  [
                    << pipeline.project.git_url >>,
                    "TKTK insert repo URL",
                  ]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - cg-deploy:
                cloudgov_username: TKTK_prod_username
                cloudgov_password: CF_PROD_PASSWORD
                cloudgov_org: TKTK-cloud.gov-org-name
                cloudgov_space: prod
                deploy_config_file: config/deployment/production.yml
                rails_master_key: PROD_RAILS_MASTER_KEY

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - static_security_scans:
          requires:
            - build
      - owasp_scan:
          requires:
            - build
      - a11y_scan:
          requires:
            - build
      - deploy:
          requires:
            - test
            - static_security_scans
            - owasp_scan
            - a11y_scan
  daily_scan:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - dev
                - main
                - production
    jobs:
      - build
      - static_security_scans:
          requires:
            - build
      - owasp_full_scan:
          requires:
            - build
